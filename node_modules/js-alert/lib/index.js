'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _queue = require('./queue.js');

var _queue2 = _interopRequireDefault(_queue);

var _eventSource = require('./event-source.js');

var _eventSource2 = _interopRequireDefault(_eventSource);

var _icons = require('./icons.js');

var _icons2 = _interopRequireDefault(_icons);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //
// Main class for the JSAlert package

var JSAlert = function (_EventSource) {
	_inherits(JSAlert, _EventSource);

	_createClass(JSAlert, null, [{
		key: 'alert',


		/** @static Creates and shows a new alert with the specified text */
		value: function alert(text, title, icon) {
			var closeText = arguments.length <= 3 || arguments[3] === undefined ? "Close" : arguments[3];


			// Check if not in a browser
			if (typeof window === "undefined") return Promise.resolve(console.log("Alert: " + text));

			// Create alert
			var alert = new JSAlert(text, title);
			alert.addButton(closeText, null);

			// Set icon
			if (icon !== false) alert.setIcon(icon || JSAlert.Icons.Information);

			// Show it
			return alert.show();
		}

		/** @static Creates and shows a new confirm alert with the specified text */

	}, {
		key: 'confirm',
		value: function confirm(text, title, icon) {
			var acceptText = arguments.length <= 3 || arguments[3] === undefined ? "OK" : arguments[3];
			var rejectText = arguments.length <= 4 || arguments[4] === undefined ? "Cancel" : arguments[4];


			// Check if not in a browser
			if (typeof window === "undefined") return Promise.resolve(console.log("Alert: " + text));

			// Create alert
			var alert = new JSAlert(text, title);
			alert.addButton(acceptText, true);
			alert.addButton(rejectText, false);

			// Set icon
			if (icon !== false) alert.setIcon(icon || JSAlert.Icons.Question);

			// Show it
			return alert.show();
		}

		/** @static Creates and shows a new prompt, an alert with a single text field. */

	}, {
		key: 'prompt',
		value: function prompt(text, defaultText, placeholderText, title, icon) {
			var acceptText = arguments.length <= 5 || arguments[5] === undefined ? "OK" : arguments[5];
			var rejectText = arguments.length <= 6 || arguments[6] === undefined ? "Cancel" : arguments[6];


			// Check if not in a browser
			if (typeof window === "undefined") return Promise.resolve(console.log("Alert: " + text));

			// Create alert
			var alert = new JSAlert(text, title);
			alert.addButton(acceptText, true, "default");
			alert.addButton(rejectText, false, "cancel");

			// Set icon
			if (icon !== false) alert.setIcon(icon || JSAlert.Icons.Question);

			// Add text field
			alert.addTextField(defaultText, null, placeholderText);

			// Show it
			return alert.show().then(function (result) {

				// Check if cancelled
				if (alert.cancelled) return null;else return alert.getTextFieldValue(0);
			});
		}

		/** @static Creates and shows a loader, which is just an alert with no buttons. */

	}, {
		key: 'loader',
		value: function loader(text, cancelable) {

			// Check if not in a browser
			if (typeof window === "undefined") return Promise.resolve(console.log("Loading: " + text));

			// Create alert
			var alert = new JSAlert(text);
			alert.cancelable = cancelable;

			// Show it
			return alert.show();
		}

		/** Constructor */

	}]);

	function JSAlert() {
		var text = arguments.length <= 0 || arguments[0] === undefined ? "" : arguments[0];
		var title = arguments.length <= 1 || arguments[1] === undefined ? "" : arguments[1];

		_classCallCheck(this, JSAlert);

		// Setup vars

		var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(JSAlert).call(this));

		_this.elems = {};
		_this.title = title;
		_this.text = text;
		_this.buttons = [];
		_this.textFields = [];
		_this.result = false;
		_this.iconURL = null;
		_this.cancelable = true;
		_this.cancelled = false;
		_this.dismissed = false;

		return _this;
	}

	/** Sets an icon for the alert. `icon` is either a URL or one of `JSAlert.Icons`. */


	_createClass(JSAlert, [{
		key: 'setIcon',
		value: function setIcon(icon) {
			this.iconURL = icon;
		}

		/** Adds a button. Returns a Promise that is called if the button is clicked. */

	}, {
		key: 'addButton',
		value: function addButton(text, value, type) {
			var _this2 = this;

			// Return promise
			return new Promise(function (onSuccess, onFail) {

				// Add button
				_this2.buttons.push({
					text: text,
					value: typeof value == "undefined" ? text : value,
					type: type || (_this2.buttons.length == 0 ? "default" : "normal"),
					callback: onSuccess
				});
			});
		}

		/** Adds a text field. Returns a Promise that will be called when the dialog is dismissed, but not cancelled. */

	}, {
		key: 'addTextField',
		value: function addTextField(value, type, placeholderText) {

			// Add text field
			this.textFields.push({
				value: value || "",
				type: type || "text",
				placeholder: placeholderText || ""
			});
		}

		/** Gets a text field's value */

	}, {
		key: 'getTextFieldValue',
		value: function getTextFieldValue(index) {

			// Get text field info
			var info = this.textFields[index];

			// Return the value
			return info.elem ? info.elem.value : info.value;
		}

		/** Shows the alert. */

	}, {
		key: 'show',
		value: function show() {
			var _this3 = this;

			// Add to the queue
			JSAlert.popupQueue.add(this).then(function () {

				// Show us
				_this3._show();

				// Notify that we have been shown
				_this3.emit("opened");
			});

			// Return the alert
			return this;
		}

		/** A then function, to allow chaining with Promises */

	}, {
		key: 'then',
		value: function then(func) {
			return this.when("closed").then(func);
		}

		/** Dismisses the alert. */

	}, {
		key: 'dismiss',
		value: function dismiss(result) {

			// Do nothing if dismissed already
			if (this.dismissed) return;
			this.dismissed = true;

			// Remove us from the queue
			JSAlert.popupQueue.remove(this);

			// Store result
			this.result = result;
			if (typeof result == "undefined") this.cancelled = true;

			// Remove elements
			this.removeElements();

			// Remove global keyboard listener
			window.removeEventListener("keydown", this);

			// Trigger cancel-specific event
			if (this.cancelled) this.emit("cancelled", this.result);else this.emit("complete", this.result);

			// Trigger closed event
			this.emit("closed", this.result);
			return this;
		}

		/** Dismisses the alert some time in the future */

	}, {
		key: 'dismissIn',
		value: function dismissIn(time) {

			setTimeout(this.dismiss.bind(this), time);
			return this;
		}

		/** @private Called to actually show the alert. */

	}, {
		key: '_show',
		value: function _show() {

			// Create elements
			this.createBackground();
			this.createPopup();

			// Add global keyboard listener
			window.addEventListener("keydown", this);
		}

		/** @private Called to create the overlay element. Theme subclasses can override this. */

	}, {
		key: 'createBackground',
		value: function createBackground() {
			var _this4 = this;

			// Create element
			this.elems.background = document.createElement("div");
			this.elems.background.style.cssText = "position: fixed; top: 0px; left: 0px; width: 100%; height: 100%; z-index: 10000; background-color: rgba(0, 0, 0, 0.1); opacity: 0; transition: opacity 0.15s; ";

			// Add to document
			document.body.appendChild(this.elems.background);

			// Do animation
			setTimeout(function () {
				_this4.elems.background.offsetWidth;
				_this4.elems.background.style.opacity = 1;
			}, 0);
		}

		/** @private Called to create the popup element. Theme subclasses can override this. */

	}, {
		key: 'createPopup',
		value: function createPopup() {
			var _this5 = this;

			// Create container element
			this.elems.container = document.createElement("div");
			this.elems.container.focusable = true;
			this.elems.container.style.cssText = "position: fixed; top: 0px; left: 0px; width: 100%; height: 100%; z-index: 10001; display: flex; justify-content: center; align-items: center; opacity: 0; transform: translateY(-40px); transition: opacity 0.15s, transform 0.15s; ";
			document.body.appendChild(this.elems.container);

			// Do animation
			setTimeout(function () {
				_this5.elems.container.offsetWidth;
				_this5.elems.container.style.opacity = 1;
				_this5.elems.container.style.transform = "translateY(0px)";
			}, 0);

			// Add dismiss handler
			this.addTouchHandler(this.elems.container, function () {

				// Check if cancelable
				if (!_this5.cancelable) return;

				// Dismiss
				_this5.cancelled = true;
				_this5.dismiss();
			});

			// Create window
			this.elems.window = document.createElement("div");
			this.elems.window.style.cssText = "position: relative; background-color: rgba(255, 255, 255, 0.95); box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.25); border-radius: 5px; padding: 10px; min-width: 50px; min-height: 10px; max-width: 50%; max-height: 90%; backdrop-filter: blur(8px); -webkit-backdrop-filter: blur(8px); ";
			this.elems.container.appendChild(this.elems.window);

			// Create icon if there is one
			if (this.iconURL) {

				this.elems.icon = document.createElement("img");
				this.elems.icon.style.cssText = "display: block; margin: auto; max-height: 40px; text-align: center; font-family: Helvetica, Arial; font-size: 17px; font-weight: bold; color: #000; cursor: default; padding: 10px 0px; ";
				this.elems.icon.src = this.iconURL;
				this.elems.window.appendChild(this.elems.icon);
			}

			// Create title if there is one
			if (this.title) {

				this.elems.title = document.createElement("div");
				this.elems.title.style.cssText = "display: block; text-align: center; font-family: Helvetica, Arial; font-size: 17px; font-weight: bold; color: #000; cursor: default; padding: 2px 20px; ";
				this.elems.title.innerHTML = this.title;
				this.elems.window.appendChild(this.elems.title);
			}

			// Create text if there is one
			if (this.text) {

				this.elems.text = document.createElement("div");
				this.elems.text.style.cssText = "display: block; text-align: center; font-family: Helvetica, Arial; font-size: 15px; font-weight: normal; color: #000; cursor: default; padding: 2px 20px; ";
				this.elems.text.innerHTML = this.text;
				this.elems.window.appendChild(this.elems.text);
			}

			// Create text fields if there are any
			if (this.textFields.length > 0) {

				this.elems.textFields = document.createElement("div");
				this.elems.textFields.style.cssText = "display: block; ";
				this.elems.window.appendChild(this.elems.textFields);

				// Add each button
				this.textFields.forEach(function (b, idx) {

					b.elem = document.createElement("input");
					b.elem.style.cssText = "display: block; width: 90%; min-width: 250px; padding: 5px 0px; margin: 10px auto; background-color: #FFF; border: 1px solid #EEE; border-radius: 5px; text-align: center; font-family: Helvetica, Arial; font-size: 15px; color: #222; ";
					b.elem.value = b.value;
					b.elem.placeholder = b.placeholder;
					b.elem.type = b.type;
					_this5.elems.textFields.appendChild(b.elem);

					// Add keyboard listener
					b.elem.addEventListener("keypress", function (e) {

						// Ignore if not enter
						if (e.keyCode != 13) return;

						// Check if this is the last input field
						if (idx + 1 >= _this5.textFields.length) {

							// Done
							_this5.dismiss("enter-pressed");
						} else {

							// Just select the next field
							_this5.textFields[idx + 1].elem.focus();
						}
					});
				});

				// Focus on first field
				this.textFields[0].elem.focus();
			}

			// Create buttons if there are any
			if (this.buttons.length > 0) {

				this.elems.buttons = document.createElement("div");
				this.elems.buttons.style.cssText = "display: block; display: flex; justify-content: space-around; align-items: center; text-align: right; border-top: 1px solid #EEE; margin-top: 10px; ";
				this.elems.window.appendChild(this.elems.buttons);

				// Add each button
				this.buttons.forEach(function (b) {

					var btn = document.createElement("div");
					btn.style.cssText = "display: inline-block; font-family: Helvetica, Arial; font-size: 15px; font-weight: 200; color: #08F; padding: 10px 20px; padding-bottom: 0px; cursor: pointer; ";
					btn.innerText = b.text;
					_this5.elems.buttons.appendChild(btn);

					// Add button handler
					_this5.addTouchHandler(btn, function () {
						b.callback && b.callback(b.value);
						if (b.type == "cancel") _this5.cancelled = true;
						_this5.dismiss(b.value);
					});
				});
			}
		}

		/** @private Called to remove all elements from the screen */

	}, {
		key: 'removeElements',
		value: function removeElements() {
			var _this6 = this;

			// Don't do anything if not loaded
			if (!this.elems || !this.elems.container) return;

			// Animate background away
			this.elems.background.style.opacity = 0;
			this.elems.container.style.opacity = 0;
			this.elems.container.style.transform = "translateY(40px)";

			// Remove elements after animation
			setTimeout(function () {
				_this6.removeElement(_this6.elems.background);
				_this6.removeElement(_this6.elems.container);
			}, 250);
		}

		/** @private Helper function to remove an element */

	}, {
		key: 'removeElement',
		value: function removeElement(elem) {
			elem && elem.parentNode && elem.parentNode.removeChild(elem);
		}

		/** @private Helper function to add a click or touch event handler that doesn't bubble */

	}, {
		key: 'addTouchHandler',
		value: function addTouchHandler(elem, callback) {

			// Create handler
			var handler = function handler(e) {

				// Stop default browser action, unless this is an input field
				if (e.target.nodeName.toLowerCase() != "input") e.preventDefault();

				// Check if our element was pressed, not a child element
				if (e.target != elem) return;

				// Trigger callback
				callback();
			};

			// Add listeners
			this.elems.container.addEventListener("mousedown", handler, true);
			this.elems.container.addEventListener("touchstart", handler, true);
		}

		/** @private Called by the browser when a keyboard event is fired on the whole window */

	}, {
		key: 'handleEvent',
		value: function handleEvent(e) {

			// Check if enter was pressed
			if (e.keyCode == 13) {

				// Find the first default button and use that value instead
				for (var i = 0; i < this.buttons.length; i++) {
					if (this.buttons[i].type == "default") {

						// Use this button's value
						this.dismiss(this.buttons[i].value);
						e.preventDefault();

						// Trigger the button's callback
						this.buttons[i].callback && this.buttons[i].callback(this.result);
						return;
					}
				}

				// No default button found, cancel
				this.cancelled = true;
				this.dismiss();
				return;
			}

			// Check if escape was pressed
			if (e.keyCode == 27) {

				// Check if cancelable
				if (!this.cancelable) return;

				// Find the first default button and use that value instead
				this.cancelled = true;
				this.result = null;
				for (var i = 0; i < this.buttons.length; i++) {
					if (this.buttons[i].type == "cancel") {

						// Use this button's value
						this.dismiss(this.buttons[i].value);
						e.preventDefault();

						// Trigger the button's callback
						this.buttons[i].callback && this.buttons[i].callback(this.result);
						return;
					}
				}

				// No cancel button found, just cancel
				this.cancelled = true;
				this.dismiss();
				return;
			}
		}
	}]);

	return JSAlert;
}(_eventSource2.default);

// Include theme's icons


exports.default = JSAlert;

JSAlert.Icons = _icons2.default;

// The default popup queue
JSAlert.popupQueue = new _queue2.default();

// In case anyone wants to use the classes of this project on their own...
JSAlert.Queue = _queue2.default;
JSAlert.EventSource = _eventSource2.default;
module.exports = exports['default'];