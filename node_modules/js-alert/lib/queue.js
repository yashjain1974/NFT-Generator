"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _eventSource = require("./event-source.js");

var _eventSource2 = _interopRequireDefault(_eventSource);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //
// Queue class - A queue contains a list of items. Only one item can be active
// at a time, and when one is removed the next one is activated
//
// To use this class, first add() your item. A promise will be returned that gets resolved
// when your item is ready to be activated. Once your item is finished doing what it needs
// to do, remove() it. This will trigger the next item's promise.
//
//	Example:
//
//		var queue = new Queue();
//		
//		var msgbox = new Popup();
//		queue.add(msgbox).then(() => {
//			msgbox.show();
//			msgbox.when('closed').then(() => queue.remove(msgbox));
//		}
//		
//		var msgbox2 = new Popup();
//		queue.add(msgbox2).then(() => {
//			msgbox2.show();
//			msgbox2.when('closed').then(() => queue.remove(msgbox2));
//		}
//	
//
//	In the above example, only one message box would be visible at a time.
//

var Queue = function (_EventSource) {
	_inherits(Queue, _EventSource);

	function Queue() {
		_classCallCheck(this, Queue);

		// Setup vars

		var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Queue).call(this));

		_this.items = [];
		_this.current = null;

		return _this;
	}

	/** Adds a queue item, and returns a Promise. */


	_createClass(Queue, [{
		key: "add",
		value: function add(item) {
			var _this2 = this;

			// Return a promise
			return new Promise(function (onSuccess, onFail) {

				// Store item and handler at the end of the queue. When this item is ready to be activated, the handler will be called to resolve the promise.
				_this2.items.push({
					item: item,
					activateHandler: onSuccess
				});

				// Emit event
				_this2.emit("added", item);

				// Check if we can activate this one now
				setTimeout(_this2.checkActivated.bind(_this2), 1);
			});
		}

		/** @private Checks if there a new item to be activated */

	}, {
		key: "checkActivated",
		value: function checkActivated() {

			// Check if there's already an activated item
			if (this.current) return;

			// Check if we have any items
			if (this.items.length == 0) {

				// No more items
				this.emit("empty");
				return;
			}

			// We can activate the next item now
			this.current = this.items[0];

			// Create promise resolve response. DO NOT directly pass a thenable, it won't work!
			var resp = {
				item: this.current.item
			};

			// Resolve promise
			this.current.activateHandler && this.current.activateHandler(resp);

			// Trigger event
			this.emit("activated", resp);
		}

		/** Removes a queued item. If the item is the currently activated one, the next item in the queue will be activated. */

	}, {
		key: "remove",
		value: function remove(item) {

			// Remove item from queue
			for (var i = 0; i < this.items.length; i++) {
				if (this.items[i].item == item) this.items.splice(i--, 1);
			} // Emit event
			this.emit("removed", item);

			// Check if this was the current item
			if (this.current && this.current.item == item) this.current = null;

			// Possibly activate the next item
			setTimeout(this.checkActivated.bind(this), 1);
		}
	}]);

	return Queue;
}(_eventSource2.default);

exports.default = Queue;
module.exports = exports["default"];